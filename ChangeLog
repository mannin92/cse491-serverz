2014-01-07  Titus Brown  <t@Titus-MacBook-Air-2.local>

 * Initialized repository, created server.py and README.

2014-01-15  Jenny  <mannin92@arctic.cse.msu.edu>

 * Deleted previous c.send lines and replaced with HTTP response msg

2014-01-23  Jenny  <mannin92@arctic.cse.msu.edu>

 * Added Test file from ctb cse491 github hw2
 * Broke code into functions, and then expanded functions
 * Handles POST and GET requests
 * Test functions for each case

2014-02-12 Jenny  <mannin92@arctic.cse.msu.edu>
 *Templates
 *Fixed previous problems.


  * PROJECT: Add a URL that provides a list of images, resized to thumbnails (you can just img size, not
    actual resizing â€“ that will be a separate project ;).

    - Summary: There's a link on the index page to see a list of all the images that were uploaded. It shows
      the most recently updated image first.

    - I added a check in get_image_raw() to see if the request included a query parameter "num". If so, 
      rather than getting the most recent image, it gets the image at images[num]. I also added a method to
      return the count of images. Using these two things, I can make a few ajax calls in the image list page
      to iterate over images and display every image.

  * PROJECT: Add the ability to comment on images
    - You can post a comment on an image from the /image page.

    - I made an Image class that has a list of comments for that string.

    - A request to the get_comments url provided an image number returns XML containing all of its comments.
      If the image number is not included it defaults to the latest image

  * PROJECT: Add url handler to refer to each image by its number.
    - /image_raw?imageNum=# will return the image with num = #.

    - If # is not numeric, or is off the end of the list, it defaults to the latest image.

    - If you go to the images list ( /image_list ) each image is a link to the URL for that image (so the
      second to the bottom image links to /image?imageNum=1 for example)

	* Implement cookie app
	* Utilize SQLite to store images
	* PROJECT: Add data persistence in sqlite

	- I decided to expand on the SQLite stuff and utilize SQlite to store my
	  comments and other stuff as well. It's an actual website now omg. :)

	* PROJECT: Add starring, ranking, and a simple recommendation system for
	  your image app image list.

	- I added a field in the image_store table to hold the image's score.

	- On the image page you can upvote/downvote images. Once I have
	  authentication I can change this so each user can only upvote/downvote
		once. For now, you can just click it as much as you want.

	* PROJECT: Swipe a template from oswd.org and put it in place on your
	  imageapp server.


		- I reference the css file in base.html, so it is referenced in all pages.

	* PROJECT: Implement AJAX image upload with JQuery.

		- I replaced upload2 because I hated it and never used it with the ajax
			upload, and changed the title to reflect that.

		- When you upload the image, it will show the uploaded image on that page,
			put it in the database, and display a success message. If it fails an
			error message appears.

I kind of just copied some of this. Sorry.
